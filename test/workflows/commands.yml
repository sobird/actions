# https://docs.github.com/zh/actions/writing-workflows/choosing-what-your-workflow-does/workflow-commands-for-github-actions
name: Workflow Commands Test
run-name: workflow commands test by ${{ github.actor }}
on: 
  push:
    branches:
      - master

jobs:
  commands-job-test:
    runs-on: ubuntu-latest
    env:
      MY_NAME: "Mona The Octocat"
    steps:
      - name: Print Env
        run: env
      - name: Create annotation for build error
        run: echo "::error file=app.js,line=1::Missing semicolon"
      - name: Setting a debug message
        run: echo "::debug::Set the Octocat variable"
      - name: Setting a notice message
        run: echo "::notice file=app.js,line=1,col=5,endColumn=7::Missing semicolon"
      - name: Setting a warning message
        run: echo "::warning file=app.js,line=1,col=5,endColumn=7::Missing semicolon"
      - name: Setting an error message
        run: echo "::error file=app.js,line=1,col=5,endColumn=7::Missing semicolon"
      - name: Grouping log lines
        run: |
            echo "::group::My title"
            echo "Inside group"
            echo "::endgroup::"
      - name: Masking a value in a log(Masking a string)
        run: |
          echo "::add-mask::Mona The Octocat"
          echo "Mona The Octocat"
      - name: Masking a value in a log(Masking an environment variable)
        run: echo "::add-mask::$MY_NAME"
      
  generate-a-secret-output:
    runs-on: ubuntu-latest
    steps:
      - id: sets-a-secret
        name: Generate, mask, and output a secret
        run: |
          the_secret=$((RANDOM))
          echo "::add-mask::$the_secret"
          echo "secret-number=$the_secret" >> "$GITHUB_OUTPUT"
      - name: Use that secret output (protected by a mask)
        run: |
          echo "the secret number is ${{ steps.sets-a-secret.outputs.secret-number }}"

  secret-generator:
    runs-on: ubuntu-latest
    outputs:
      handle: ${{ steps.generate-secret.outputs.handle }}
    steps:
    - name: generate secret
      id: generate-secret
      shell: bash
      run: |
        GENERATED_SECRET=$((RANDOM))
        echo "::add-mask::$GENERATED_SECRET"
        echo "handle=$GENERATED_SECRET" >> "$GITHUB_OUTPUT"
  secret-consumer:
    runs-on: ubuntu-latest
    needs: secret-generator
    steps:
    - name: use secret
      shell: bash
      run: |
        SECRET_HANDLE="${{ needs.secret-generator.outputs.handle }}"
        echo "::add-mask::$SECRET_HANDLE"
        echo "We retrieved our masked secret: $SECRET_HANDLE"

  command-job:
    runs-on: ubuntu-latest
    steps:
      - name: Disable workflow commands
        run: |
          echo '::warning:: This is a warning message, to demonstrate that commands are being processed.'
          stopMarker=$((RANDOM))
          echo "::$(date +'%T')::$stopMarker"
          echo '::warning:: This will NOT be rendered as a warning, because stop-commands has been invoked.'
          echo "::$stopMarker::"
          echo '::warning:: This is a warning again, because stop-commands has been turned off.'

  set_and_use_env_vars:
    runs-on: ubuntu-latest
    steps:
      - name: Set environment variable
        run: echo "MY_ENV_VAR=myValue" >> $GITHUB_ENV

      - name: Use environment variable
        run: |
          echo "The value of MY_ENV_VAR is $MY_ENV_VAR"

      - name: Store build timestamp
        run: echo "BUILD_TIME=$(date +'%T')" >> $GITHUB_ENV

      - name: Deploy using stored timestamp
        run: echo "Deploying at $BUILD_TIME"

      - name: Set the value
        id: step_one
        run: |
          echo "action_state=yellow" >> "$GITHUB_ENV"
      - name: Use the value
        id: step_two
        run: |
          printf '%s\n' "$action_state" # This will output 'yellow'
      
      - name: Set the value in bash
        id: step_three
        run: |
          {
            echo 'JSON_RESPONSE<<EOF'
            curl https://example.com
            echo EOF
          } >> "$GITHUB_ENV"

      - name: Set color
        id: color-selector
        run: echo "SELECTED_COLOR=green" >> "$GITHUB_OUTPUT"
      - name: Get color
        env:
          SELECTED_COLOR: ${{ steps.color-selector.outputs.SELECTED_COLOR }}
        run: echo "The selected color is $SELECTED_COLOR"

      - name: Adding a job summary
        run: echo "### Hello world! :rocket:" >> $GITHUB_STEP_SUMMARY
      
      - name: Generate list using Markdown(Multiline Markdown content)
        run: |
          echo "This is the lead in sentence for the list" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY # this is a blank line
          echo "- Lets add a bullet point" >> $GITHUB_STEP_SUMMARY
          echo "- Lets add a second bullet point" >> $GITHUB_STEP_SUMMARY
          echo "- How about a third one?" >> $GITHUB_STEP_SUMMARY

      - name: Overwrite Markdown
        run: |
          echo "Adding some Markdown content" >> $GITHUB_STEP_SUMMARY
          echo "There was an error, we need to clear the previous Markdown with some new content." > $GITHUB_STEP_SUMMARY
      
      - name: Delete all summary content(Removing job summaries)
        run: |
          echo "Adding Markdown content that we want to remove before the step ends" >> $GITHUB_STEP_SUMMARY
          rm $GITHUB_STEP_SUMMARY

      - name: Adding a system path
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH

