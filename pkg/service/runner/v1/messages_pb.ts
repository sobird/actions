// @generated by protoc-gen-es v2.2.3 with parameter "target=ts"
// @generated from file runner/v1/messages.proto (package runner.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_struct, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { JsonObject, Message } from "@bufbuild/protobuf";

/**
 * Describes the file runner/v1/messages.proto.
 */
export const file_runner_v1_messages: GenFile = /*@__PURE__*/
  fileDesc("ChhydW5uZXIvdjEvbWVzc2FnZXMucHJvdG8SCXJ1bm5lci52MSKEAQoPUmVnaXN0ZXJSZXF1ZXN0EgwKBG5hbWUYASABKAkSDQoFdG9rZW4YAiABKAkSGAoMYWdlbnRfbGFiZWxzGAMgAygJQgIYARIZCg1jdXN0b21fbGFiZWxzGAQgAygJQgIYARIPCgd2ZXJzaW9uGAUgASgJEg4KBmxhYmVscxgGIAMoCSI1ChBSZWdpc3RlclJlc3BvbnNlEiEKBnJ1bm5lchgBIAEoCzIRLnJ1bm5lci52MS5SdW5uZXIiMQoORGVjbGFyZVJlcXVlc3QSDwoHdmVyc2lvbhgBIAEoCRIOCgZsYWJlbHMYAiADKAkiNAoPRGVjbGFyZVJlc3BvbnNlEiEKBnJ1bm5lchgBIAEoCzIRLnJ1bm5lci52MS5SdW5uZXIiKQoQRmV0Y2hUYXNrUmVxdWVzdBIVCg10YXNrc192ZXJzaW9uGAEgASgDIkkKEUZldGNoVGFza1Jlc3BvbnNlEh0KBHRhc2sYASABKAsyDy5ydW5uZXIudjEuVGFzaxIVCg10YXNrc192ZXJzaW9uGAIgASgDIqQBChFVcGRhdGVUYXNrUmVxdWVzdBIjCgVzdGF0ZRgBIAEoCzIULnJ1bm5lci52MS5UYXNrU3RhdGUSOgoHb3V0cHV0cxgCIAMoCzIpLnJ1bm5lci52MS5VcGRhdGVUYXNrUmVxdWVzdC5PdXRwdXRzRW50cnkaLgoMT3V0cHV0c0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiTwoSVXBkYXRlVGFza1Jlc3BvbnNlEiMKBXN0YXRlGAEgASgLMhQucnVubmVyLnYxLlRhc2tTdGF0ZRIUCgxzZW50X291dHB1dHMYAiADKAkiZAoQVXBkYXRlTG9nUmVxdWVzdBIPCgd0YXNrX2lkGAEgASgDEg0KBWluZGV4GAIgASgDEh8KBHJvd3MYAyADKAsyES5ydW5uZXIudjEuTG9nUm93Eg8KB25vX21vcmUYBCABKAgiJgoRVXBkYXRlTG9nUmVzcG9uc2USEQoJYWNrX2luZGV4GAEgASgDIr4BCgZSdW5uZXISCgoCaWQYASABKAMSDAoEdXVpZBgCIAEoCRINCgV0b2tlbhgDIAEoCRIMCgRuYW1lGAQgASgJEicKBnN0YXR1cxgFIAEoDjIXLnJ1bm5lci52MS5SdW5uZXJTdGF0dXMSGAoMYWdlbnRfbGFiZWxzGAYgAygJQgIYARIZCg1jdXN0b21fbGFiZWxzGAcgAygJQgIYARIPCgd2ZXJzaW9uGAggASgJEg4KBmxhYmVscxgJIAMoCSK5AwoEVGFzaxIKCgJpZBgBIAEoAxIdChB3b3JrZmxvd19wYXlsb2FkGAIgASgMSACIAQESLQoHY29udGV4dBgDIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3RIAYgBARItCgdzZWNyZXRzGAQgAygLMhwucnVubmVyLnYxLlRhc2suU2VjcmV0c0VudHJ5EhMKB21hY2hpbmUYBSABKAlCAhgBEikKBW5lZWRzGAYgAygLMhoucnVubmVyLnYxLlRhc2suTmVlZHNFbnRyeRInCgR2YXJzGAcgAygLMhkucnVubmVyLnYxLlRhc2suVmFyc0VudHJ5Gi4KDFNlY3JldHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBGkEKCk5lZWRzRW50cnkSCwoDa2V5GAEgASgJEiIKBXZhbHVlGAIgASgLMhMucnVubmVyLnYxLlRhc2tOZWVkOgI4ARorCglWYXJzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4AUITChFfd29ya2Zsb3dfcGF5bG9hZEIKCghfY29udGV4dCKQAQoIVGFza05lZWQSMQoHb3V0cHV0cxgBIAMoCzIgLnJ1bm5lci52MS5UYXNrTmVlZC5PdXRwdXRzRW50cnkSIQoGcmVzdWx0GAIgASgOMhEucnVubmVyLnYxLlJlc3VsdBouCgxPdXRwdXRzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASK/AQoJVGFza1N0YXRlEgoKAmlkGAEgASgDEiEKBnJlc3VsdBgCIAEoDjIRLnJ1bm5lci52MS5SZXN1bHQSLgoKc3RhcnRlZF9hdBgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLgoKc3RvcHBlZF9hdBgEIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASIwoFc3RlcHMYBSADKAsyFC5ydW5uZXIudjEuU3RlcFN0YXRlIsEBCglTdGVwU3RhdGUSCgoCaWQYASABKAMSIQoGcmVzdWx0GAIgASgOMhEucnVubmVyLnYxLlJlc3VsdBIuCgpzdGFydGVkX2F0GAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIuCgpzdG9wcGVkX2F0GAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIRCglsb2dfaW5kZXgYBSABKAMSEgoKbG9nX2xlbmd0aBgGIAEoAyJDCgZMb2dSb3cSKAoEdGltZRgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASDwoHY29udGVudBgCIAEoCSp6CgxSdW5uZXJTdGF0dXMSHQoZUlVOTkVSX1NUQVRVU19VTlNQRUNJRklFRBAAEhYKElJVTk5FUl9TVEFUVVNfSURMRRABEhgKFFJVTk5FUl9TVEFUVVNfQUNUSVZFEAISGQoVUlVOTkVSX1NUQVRVU19PRkZMSU5FEAMqcgoGUmVzdWx0EhYKElJFU1VMVF9VTlNQRUNJRklFRBAAEhIKDlJFU1VMVF9TVUNDRVNTEAESEgoOUkVTVUxUX0ZBSUxVUkUQAhIUChBSRVNVTFRfQ0FOQ0VMTEVEEAMSEgoOUkVTVUxUX1NLSVBQRUQQBEJjCg1jb20ucnVubmVyLnYxQg1NZXNzYWdlc1Byb3RvUAGiAgNSWFiqAglSdW5uZXIuVjHKAglSdW5uZXJcVjHiAhVSdW5uZXJcVjFcR1BCTWV0YWRhdGHqAgpSdW5uZXI6OlYxYgZwcm90bzM", [file_google_protobuf_struct, file_google_protobuf_timestamp]);

/**
 * @generated from message runner.v1.RegisterRequest
 */
export type RegisterRequest = Message<"runner.v1.RegisterRequest"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string token = 2;
   */
  token: string;

  /**
   * @generated from field: repeated string agent_labels = 3 [deprecated = true];
   * @deprecated
   */
  agentLabels: string[];

  /**
   * @generated from field: repeated string custom_labels = 4 [deprecated = true];
   * @deprecated
   */
  customLabels: string[];

  /**
   * @generated from field: string version = 5;
   */
  version: string;

  /**
   * @generated from field: repeated string labels = 6;
   */
  labels: string[];
};

/**
 * Describes the message runner.v1.RegisterRequest.
 * Use `create(RegisterRequestSchema)` to create a new message.
 */
export const RegisterRequestSchema: GenMessage<RegisterRequest> = /*@__PURE__*/
  messageDesc(file_runner_v1_messages, 0);

/**
 * @generated from message runner.v1.RegisterResponse
 */
export type RegisterResponse = Message<"runner.v1.RegisterResponse"> & {
  /**
   * @generated from field: runner.v1.Runner runner = 1;
   */
  runner?: Runner;
};

/**
 * Describes the message runner.v1.RegisterResponse.
 * Use `create(RegisterResponseSchema)` to create a new message.
 */
export const RegisterResponseSchema: GenMessage<RegisterResponse> = /*@__PURE__*/
  messageDesc(file_runner_v1_messages, 1);

/**
 * @generated from message runner.v1.DeclareRequest
 */
export type DeclareRequest = Message<"runner.v1.DeclareRequest"> & {
  /**
   * @generated from field: string version = 1;
   */
  version: string;

  /**
   * @generated from field: repeated string labels = 2;
   */
  labels: string[];
};

/**
 * Describes the message runner.v1.DeclareRequest.
 * Use `create(DeclareRequestSchema)` to create a new message.
 */
export const DeclareRequestSchema: GenMessage<DeclareRequest> = /*@__PURE__*/
  messageDesc(file_runner_v1_messages, 2);

/**
 * @generated from message runner.v1.DeclareResponse
 */
export type DeclareResponse = Message<"runner.v1.DeclareResponse"> & {
  /**
   * @generated from field: runner.v1.Runner runner = 1;
   */
  runner?: Runner;
};

/**
 * Describes the message runner.v1.DeclareResponse.
 * Use `create(DeclareResponseSchema)` to create a new message.
 */
export const DeclareResponseSchema: GenMessage<DeclareResponse> = /*@__PURE__*/
  messageDesc(file_runner_v1_messages, 3);

/**
 * @generated from message runner.v1.FetchTaskRequest
 */
export type FetchTaskRequest = Message<"runner.v1.FetchTaskRequest"> & {
  /**
   * Runner use `tasks_version` to compare with Gitea and detemine whether new tasks may exist.
   *
   * @generated from field: int64 tasks_version = 1;
   */
  tasksVersion: bigint;
};

/**
 * Describes the message runner.v1.FetchTaskRequest.
 * Use `create(FetchTaskRequestSchema)` to create a new message.
 */
export const FetchTaskRequestSchema: GenMessage<FetchTaskRequest> = /*@__PURE__*/
  messageDesc(file_runner_v1_messages, 4);

/**
 * @generated from message runner.v1.FetchTaskResponse
 */
export type FetchTaskResponse = Message<"runner.v1.FetchTaskResponse"> & {
  /**
   * @generated from field: runner.v1.Task task = 1;
   */
  task?: Task;

  /**
   * Gitea informs the Runner of the latest version of tasks through `tasks_version`.
   *
   * @generated from field: int64 tasks_version = 2;
   */
  tasksVersion: bigint;
};

/**
 * Describes the message runner.v1.FetchTaskResponse.
 * Use `create(FetchTaskResponseSchema)` to create a new message.
 */
export const FetchTaskResponseSchema: GenMessage<FetchTaskResponse> = /*@__PURE__*/
  messageDesc(file_runner_v1_messages, 5);

/**
 * @generated from message runner.v1.UpdateTaskRequest
 */
export type UpdateTaskRequest = Message<"runner.v1.UpdateTaskRequest"> & {
  /**
   * @generated from field: runner.v1.TaskState state = 1;
   */
  state?: TaskState;

  /**
   * The outputs of the task. Since the outputs may be large, the client does not need to send all outputs every time, only the unsent outputs.
   *
   * @generated from field: map<string, string> outputs = 2;
   */
  outputs: { [key: string]: string };
};

/**
 * Describes the message runner.v1.UpdateTaskRequest.
 * Use `create(UpdateTaskRequestSchema)` to create a new message.
 */
export const UpdateTaskRequestSchema: GenMessage<UpdateTaskRequest> = /*@__PURE__*/
  messageDesc(file_runner_v1_messages, 6);

/**
 * @generated from message runner.v1.UpdateTaskResponse
 */
export type UpdateTaskResponse = Message<"runner.v1.UpdateTaskResponse"> & {
  /**
   * @generated from field: runner.v1.TaskState state = 1;
   */
  state?: TaskState;

  /**
   * The keys of the outputs that have been sent, not only the ones that have been sent this time, but also those that have been sent before.
   *
   * @generated from field: repeated string sent_outputs = 2;
   */
  sentOutputs: string[];
};

/**
 * Describes the message runner.v1.UpdateTaskResponse.
 * Use `create(UpdateTaskResponseSchema)` to create a new message.
 */
export const UpdateTaskResponseSchema: GenMessage<UpdateTaskResponse> = /*@__PURE__*/
  messageDesc(file_runner_v1_messages, 7);

/**
 * @generated from message runner.v1.UpdateLogRequest
 */
export type UpdateLogRequest = Message<"runner.v1.UpdateLogRequest"> & {
  /**
   * @generated from field: int64 task_id = 1;
   */
  taskId: bigint;

  /**
   * The actual index of the first line.
   *
   * @generated from field: int64 index = 2;
   */
  index: bigint;

  /**
   * @generated from field: repeated runner.v1.LogRow rows = 3;
   */
  rows: LogRow[];

  /**
   * No more logs.
   *
   * @generated from field: bool no_more = 4;
   */
  noMore: boolean;
};

/**
 * Describes the message runner.v1.UpdateLogRequest.
 * Use `create(UpdateLogRequestSchema)` to create a new message.
 */
export const UpdateLogRequestSchema: GenMessage<UpdateLogRequest> = /*@__PURE__*/
  messageDesc(file_runner_v1_messages, 8);

/**
 * @generated from message runner.v1.UpdateLogResponse
 */
export type UpdateLogResponse = Message<"runner.v1.UpdateLogResponse"> & {
  /**
   * If all lines are received, should be index + length(lines).
   *
   * @generated from field: int64 ack_index = 1;
   */
  ackIndex: bigint;
};

/**
 * Describes the message runner.v1.UpdateLogResponse.
 * Use `create(UpdateLogResponseSchema)` to create a new message.
 */
export const UpdateLogResponseSchema: GenMessage<UpdateLogResponse> = /*@__PURE__*/
  messageDesc(file_runner_v1_messages, 9);

/**
 * Runner Payload
 *
 * @generated from message runner.v1.Runner
 */
export type Runner = Message<"runner.v1.Runner"> & {
  /**
   * @generated from field: int64 id = 1;
   */
  id: bigint;

  /**
   * @generated from field: string uuid = 2;
   */
  uuid: string;

  /**
   * @generated from field: string token = 3;
   */
  token: string;

  /**
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * @generated from field: runner.v1.RunnerStatus status = 5;
   */
  status: RunnerStatus;

  /**
   * @generated from field: repeated string agent_labels = 6 [deprecated = true];
   * @deprecated
   */
  agentLabels: string[];

  /**
   * @generated from field: repeated string custom_labels = 7 [deprecated = true];
   * @deprecated
   */
  customLabels: string[];

  /**
   * @generated from field: string version = 8;
   */
  version: string;

  /**
   * @generated from field: repeated string labels = 9;
   */
  labels: string[];
};

/**
 * Describes the message runner.v1.Runner.
 * Use `create(RunnerSchema)` to create a new message.
 */
export const RunnerSchema: GenMessage<Runner> = /*@__PURE__*/
  messageDesc(file_runner_v1_messages, 10);

/**
 * Task represents a task.
 *
 * @generated from message runner.v1.Task
 */
export type Task = Message<"runner.v1.Task"> & {
  /**
   * A unique number for each workflow run, unlike run_id or job_id, task_id never be reused.
   *
   * @generated from field: int64 id = 1;
   */
  id: bigint;

  /**
   * The content of the expanded workflow yaml file.
   *
   * @generated from field: optional bytes workflow_payload = 2;
   */
  workflowPayload?: Uint8Array;

  /**
   * See https://docs.github.com/en/actions/learn-github-actions/contexts#github-context .
   *
   * @generated from field: optional google.protobuf.Struct context = 3;
   */
  context?: JsonObject;

  /**
   * See https://docs.github.com/en/actions/learn-github-actions/contexts#secrets-context .
   *
   * @generated from field: map<string, string> secrets = 4;
   */
  secrets: { [key: string]: string };

  /**
   * Unused.
   *
   * @generated from field: string machine = 5 [deprecated = true];
   * @deprecated
   */
  machine: string;

  /**
   * See https://docs.github.com/en/actions/learn-github-actions/contexts#needs-context .
   *
   * @generated from field: map<string, runner.v1.TaskNeed> needs = 6;
   */
  needs: { [key: string]: TaskNeed };

  /**
   * See https://docs.github.com/en/actions/learn-github-actions/contexts#vars-context .
   *
   * @generated from field: map<string, string> vars = 7;
   */
  vars: { [key: string]: string };
};

/**
 * Describes the message runner.v1.Task.
 * Use `create(TaskSchema)` to create a new message.
 */
export const TaskSchema: GenMessage<Task> = /*@__PURE__*/
  messageDesc(file_runner_v1_messages, 11);

/**
 * TaskNeed represents a task need.
 *
 * @generated from message runner.v1.TaskNeed
 */
export type TaskNeed = Message<"runner.v1.TaskNeed"> & {
  /**
   * The set of outputs of a job that the current job depends on.
   *
   * @generated from field: map<string, string> outputs = 1;
   */
  outputs: { [key: string]: string };

  /**
   * The result of a job that the current job depends on. Possible values are success, failure, cancelled, or skipped.
   *
   * @generated from field: runner.v1.Result result = 2;
   */
  result: Result;
};

/**
 * Describes the message runner.v1.TaskNeed.
 * Use `create(TaskNeedSchema)` to create a new message.
 */
export const TaskNeedSchema: GenMessage<TaskNeed> = /*@__PURE__*/
  messageDesc(file_runner_v1_messages, 12);

/**
 * TaskState represents the state of a task.
 *
 * @generated from message runner.v1.TaskState
 */
export type TaskState = Message<"runner.v1.TaskState"> & {
  /**
   * @generated from field: int64 id = 1;
   */
  id: bigint;

  /**
   * @generated from field: runner.v1.Result result = 2;
   */
  result: Result;

  /**
   * @generated from field: google.protobuf.Timestamp started_at = 3;
   */
  startedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp stopped_at = 4;
   */
  stoppedAt?: Timestamp;

  /**
   * @generated from field: repeated runner.v1.StepState steps = 5;
   */
  steps: StepState[];
};

/**
 * Describes the message runner.v1.TaskState.
 * Use `create(TaskStateSchema)` to create a new message.
 */
export const TaskStateSchema: GenMessage<TaskState> = /*@__PURE__*/
  messageDesc(file_runner_v1_messages, 13);

/**
 * TaskState represents the state of a step.
 *
 * @generated from message runner.v1.StepState
 */
export type StepState = Message<"runner.v1.StepState"> & {
  /**
   * @generated from field: int64 id = 1;
   */
  id: bigint;

  /**
   * @generated from field: runner.v1.Result result = 2;
   */
  result: Result;

  /**
   * @generated from field: google.protobuf.Timestamp started_at = 3;
   */
  startedAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp stopped_at = 4;
   */
  stoppedAt?: Timestamp;

  /**
   * Where the first line log of the step.
   *
   * @generated from field: int64 log_index = 5;
   */
  logIndex: bigint;

  /**
   * How many logs the step has.
   *
   * @generated from field: int64 log_length = 6;
   */
  logLength: bigint;
};

/**
 * Describes the message runner.v1.StepState.
 * Use `create(StepStateSchema)` to create a new message.
 */
export const StepStateSchema: GenMessage<StepState> = /*@__PURE__*/
  messageDesc(file_runner_v1_messages, 14);

/**
 * LogRow represents a row of logs.
 *
 * @generated from message runner.v1.LogRow
 */
export type LogRow = Message<"runner.v1.LogRow"> & {
  /**
   * @generated from field: google.protobuf.Timestamp time = 1;
   */
  time?: Timestamp;

  /**
   * @generated from field: string content = 2;
   */
  content: string;
};

/**
 * Describes the message runner.v1.LogRow.
 * Use `create(LogRowSchema)` to create a new message.
 */
export const LogRowSchema: GenMessage<LogRow> = /*@__PURE__*/
  messageDesc(file_runner_v1_messages, 15);

/**
 * RunnerStatus runner all status
 *
 * @generated from enum runner.v1.RunnerStatus
 */
export enum RunnerStatus {
  /**
   * @generated from enum value: RUNNER_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: RUNNER_STATUS_IDLE = 1;
   */
  IDLE = 1,

  /**
   * @generated from enum value: RUNNER_STATUS_ACTIVE = 2;
   */
  ACTIVE = 2,

  /**
   * @generated from enum value: RUNNER_STATUS_OFFLINE = 3;
   */
  OFFLINE = 3,
}

/**
 * Describes the enum runner.v1.RunnerStatus.
 */
export const RunnerStatusSchema: GenEnum<RunnerStatus> = /*@__PURE__*/
  enumDesc(file_runner_v1_messages, 0);

/**
 * The result of a task or a step, see https://docs.github.com/en/actions/learn-github-actions/contexts#jobs-context .
 *
 * @generated from enum runner.v1.Result
 */
export enum Result {
  /**
   * @generated from enum value: RESULT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: RESULT_SUCCESS = 1;
   */
  SUCCESS = 1,

  /**
   * @generated from enum value: RESULT_FAILURE = 2;
   */
  FAILURE = 2,

  /**
   * @generated from enum value: RESULT_CANCELLED = 3;
   */
  CANCELLED = 3,

  /**
   * @generated from enum value: RESULT_SKIPPED = 4;
   */
  SKIPPED = 4,
}

/**
 * Describes the enum runner.v1.Result.
 */
export const ResultSchema: GenEnum<Result> = /*@__PURE__*/
  enumDesc(file_runner_v1_messages, 1);

