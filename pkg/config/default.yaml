# Example configuration file, it's safe to copy this as the default config file without any modification.

# You don't have to copy this file to your instance,
# just run `actions config > actions.config.yaml` to generate a config file.

log:
  # The level of logging, can be trace, debug, info, warn, error, fatal
  level: info

registration:
  # Where to store the registration result.
  file: .runner

daemon: 
  # Execute how many tasks concurrently at the same time.
  capacity: 1
  # Whether skip verifying the TLS certificate of the Server instance.
  insecure: false
  # The timeout for a job to be finished.
  # Please note that the Server instance also has a timeout (3h by default) for the job.
  # So the job could be stopped by the Server instance if it's timeout is shorter than this.
  timeout: 10800000
  # The timeout for fetching the job from the Server instance.
  fetchTimeout: 5000
  # The interval for fetching the job from the Server instance.
  fetchInterval: 3000

runner:
  # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs
  # NOT RECOMMENDED! You can configure the context yourself based on the link provided above
  context:
  # The username of the user that triggered the initial workflow run
  actor:
  # github token
  token:
  # Path to event JSON file
  eventFile: event.json
  # Extra environment variables to run jobs.
  env:
    A_TEST_ENV_NAME_1: a_test_env_value_1
    A_TEST_ENV_NAME_2: a_test_env_value_2
  # Extra environment variables to run jobs from a file.
  # It will be ignored if it's empty or the file doesn't exist.
  envFile: .env
  # Extra variables to run jobs from a file.
  # It will be ignored if it's empty or the file doesn't exist.
  vars:
  varsFile: .vars
  # Extra inputs to run jobs from a file.
  # It will be ignored if it's empty or the file doesn't exist.
  inputs:
  inputsFile: .inputs
  # Extra secrets to run jobs from a file.
  # It will be ignored if it's empty or the file doesn't exist.
  secrets:
  secretsFile: .secrets

  # The parent directory of a job's working directory.
  # If it's empty, /home/runner will be used.
  workspace: /home/runner
  workdir:
  # Bind the workdir to the job container.
  bindWorkdir: false
  # git remote name that will be used to retrieve url of git repo
  remoteName:
  # the name of the main branch
  defaultBranch:

  skipCheckout:
  useGitignore:
  serverInstance:
  actionInstance:
  replaceGheActionWithGithubCom:
  replaceGheActionTokenWithGithubCom:
  
  # actions/cache
  # Enable cache server to use actions/cache.
  actionsCache: true
  # The directory to store the cache data.
  # If it's empty, the cache data will be stored in $ACTIONS_HOME/cache.
  actionsCachePath: ""
  # The host of the cache server.
  # It's not for the address to listen, but the address to connect from job containers.
  # So 0.0.0.0 is a bad choice, leave it empty to detect automatically.
  actionsCacheAddr: ""
  # The port of the cache server.
  # 0 means to use a random available port.
  actionsCachePort: 0
  # The external cache server URL. Valid only when enable is true.
  # If it's specified, runner will use this URL as the ACTIONS_CACHE_URL rather than start a server by itself.
  # The URL should generally end with "/".
  actionsCacheExternal: ""
  
  # defines the path where the artifact server stores uploads and retrieves downloads from. 
  # If not specified the artifact server will not start
  artifactPath: 
  # defines the address where the artifact server listens
  artifactAddr:
  # defines the port where the artifact server listens (will only bind to localhost)
  artifactPort: 0


  # Enable using the new cache actions for storing actions locally
  cacheActions: true
  # The directory of actions.
  # If it's empty, $ACTIONS_HOME/actions will be used.
  actionsPath:
  # replaces the specified repository and ref with a local folder 
  # e.g. https://github.com/test/test@v0=/home/actions/test or test/test@v0=/home/actions/test, the latter matches any hosts or protocols
  repositories: 
  # If action contents exists, it will not be fetch and pull again. 
  # If turn on this, will turn off force pull
  actionsOffline:

  # container

  # The labels of a runner are used to determine which jobs the runner can run, and how to run them.
  # Like: "macos-arm64=host" or "ubuntu-latest=gitea/runner-images:ubuntu-latest"
  # Find more images provided by Server at https://gitea.com/gitea/runner-images .
  # If it's empty when registering, it will ask for inputting labels.
  # If it's empty when execute `daemon`, will use labels in `.runner` file.
  labels:
    - ubuntu-latest=catthehacker/ubuntu:act-latest
    - ubuntu-22.04=gitea/runner-images:ubuntu-22.04
    - ubuntu-20.04=gitea/runner-images:ubuntu-20.04
    - self-hosted=-self-hosted
  matrix:
    java:
      - 13
    node:
      - 22
      - 20
      - 18

  # Pull docker image(s) even if already present
  pull: false
  # Reuse container
  reuse: false
  # Rebuild docker image(s) even if already present
  rebuild: true
  containerNamePrefix:
  # Specifies the network to which the container will connect.
  # Could be host, bridge or the name of a custom network.
  # If it's empty, runner will create a network automatically.
  containerNetwork:
  containerPlatform:
  # overrides the docker client host with the specified one.
  # If it's empty, runner will find an available docker host automatically.
  # If it's "-", runner will find an available docker host automatically, but the docker host won't be mounted to the job containers and service containers.
  # If it's not empty or "-", the specified docker host will be used. An error will be returned if it doesn't work.
  containerDaemonSocket:
  # Whether to use privileged mode or not when launching task containers (privileged mode is required for Docker-in-Docker).
  containerPrivileged: false
  containerAutoRemove: true
  containerUsernsMode: 
  containerCapAdd: []
  containerCapDrop: []
  containerMaxLifetime: 3600
  # And other options to be used when the container is started (eg, --add-host=my.gitea.url:host-gateway).
  containerOptions: