# Example configuration file, it's safe to copy this as the default config file without any modification.

# You don't have to copy this file to your instance,
# just run `actions config > actions.config.json` to generate a config file.

log:
  # The level of logging, can be trace, debug, info, warn, error, fatal
  level: info

registration:
  # Where to store the registration result.
  file: .runner

daemon: 
  # Execute how many tasks concurrently at the same time.
  capacity: 1
  # Whether skip verifying the TLS certificate of the Server instance.
  insecure: false
  # The timeout for a job to be finished.
  # Please note that the Server instance also has a timeout (3h by default) for the job.
  # So the job could be stopped by the Server instance if it's timeout is shorter than this.
  timeout: 10800000
  # The timeout for fetching the job from the Server instance.
  fetchTimeout: 5000
  # The interval for fetching the job from the Server instance.
  fetchInterval: 3000

runner:
  context:
    github:
    env:
      name: sobird
  # The parent directory of a job's working directory.
  # NOTE: There is no need to add the first '/' of the path as runner will add it automatically. 
  # If the path starts with '/', the '/' will be trimmed.
  # For example, if the parent directory is /path/to/my/dir, workdir_parent should be path/to/my/dir
  # If it's empty, /workspace will be used.
  workdir:
  # Bind the workdir to the job container.
  bindWorkdir: true
  # Path to event JSON file
  eventFile: event.json
  # Extra environment variables to run jobs.
  env:
    A_TEST_ENV_NAME_1: a_test_env_value_1
    A_TEST_ENV_NAME_2: a_test_env_value_2
  # Extra environment variables to run jobs from a file.
  # It will be ignored if it's empty or the file doesn't exist.
  envFile: .env
  vars:
  varsFile: .vars
  inputs:
  inputsFile: .inputs
  secrets:
  secretsFile: .secrets
  # The labels of a runner are used to determine which jobs the runner can run, and how to run them.
  # Like: "macos-arm64=host" or "ubuntu-latest=gitea/runner-images:ubuntu-latest"
  # Find more images provided by Server at https://gitea.com/gitea/runner-images .
  # If it's empty when registering, it will ask for inputting labels.
  # If it's empty when execute `daemon`, will use labels in `.runner` file.
  labels:
    - ubuntu-latest=gitea/runner-images:ubuntu-latest
    - ubuntu-22.04=gitea/runner-images:ubuntu-22.04
    - ubuntu-20.04=gitea/runner-images:ubuntu-20.04
    - self-hosted=-self-hosted
  #actions
  actionInstance: github.com
  # actions/cache
  # Enable cache server to use actions/cache.
  cacheServer: true
  # The directory to store the cache data.
  # If it's empty, the cache data will be stored in $ACTIONS_HOME/cache.
  cacheServerPath: ""
  # The host of the cache server.
  # It's not for the address to listen, but the address to connect from job containers.
  # So 0.0.0.0 is a bad choice, leave it empty to detect automatically.
  cacheServerAddr: ""
  # The port of the cache server.
  # 0 means to use a random available port.
  cacheServerPort: 0
  # The external cache server URL. Valid only when enable is true.
  # If it's specified, runner will use this URL as the ACTIONS_CACHE_URL rather than start a server by itself.
  # The URL should generally end with "/".
  externalServer: ""
  # defines the path where the artifact server stores uploads and retrieves downloads from. 
  # If not specified the artifact server will not start
  artifactServerPath: ""
  # defines the address where the artifact server listens
  artifactServerAddr: ""
  # defines the port where the artifact server listens (will only bind to localhost)
  artifactServerPort: 0

  # The parent directory of a job's working directory.
  # If it's empty, $HOME/.cache/act/ will be used.
  actionCacheDir: ""

  matrix:
    java:
      - 13
    node:
      - 22
      - 20
      - 18

container:
  # Specifies the network to which the container will connect.
  # Could be host, bridge or the name of a custom network.
  # If it's empty, runner will create a network automatically.
  network: ""
  # Whether to use privileged mode or not when launching task containers (privileged mode is required for Docker-in-Docker).
  privileged: false
  # And other options to be used when the container is started (eg, --add-host=my.gitea.url:host-gateway).
  options:
  # Volumes (including bind mounts) can be mounted to containers. Glob syntax is supported, see https://github.com/gobwas/glob
  # You can specify multiple volumes. If the sequence is empty, no volumes can be mounted.
  # For example, if you only allow containers to mount the `data` volume and all the json files in `/src`, you should change the config to:
  # valid_volumes:
  #   - data
  #   - /src/*.json
  # If you want to allow any volume, please use the following configuration:
  # valid_volumes:
  #   - '**'
  validVolumes: []
  # overrides the docker client host with the specified one.
  # If it's empty, runner will find an available docker host automatically.
  # If it's "-", runner will find an available docker host automatically, but the docker host won't be mounted to the job containers and service containers.
  # If it's not empty or "-", the specified docker host will be used. An error will be returned if it doesn't work.
  dockerHost: ""
  # Pull docker image(s) even if already present
  forcePull: true
  # Rebuild docker image(s) even if already present
  forceRebuild: false